diff --git a/Makefile b/Makefile
index f9d5970f3..aaa383f5b 100644
--- a/Makefile
+++ b/Makefile
@@ -391,6 +391,7 @@ include $(srctree)/scripts/subarch.include
 # Default value for CROSS_COMPILE is not to prefix executables
 # Note: Some architectures assign CROSS_COMPILE in their arch/*/Makefile
 ARCH		?= $(SUBARCH)
+$(info $$SUBARCH is [${SUBARCH}])

 # Architecture as present in compile.h
 UTS_MACHINE 	:= $(ARCH)
\ No newline at end of file
diff --git a/arch/arm64/kernel/vdso32/Makefile b/arch/arm64/kernel/vdso32/Makefile
index 2f73e5bca..e5f7fffb9 100644
--- a/arch/arm64/kernel/vdso32/Makefile
+++ b/arch/arm64/kernel/vdso32/Makefile
@@ -106,6 +106,7 @@ VDSO_LDFLAGS += --orphan-handling=$(CONFIG_LD_ORPHAN_WARN_LEVEL)
 # We have to use a relative path because scripts/Makefile.host prefixes
 # $(hostprogs) with $(obj)
 munge := ../../../arm/vdso/vdsomunge
+HOST_EXTRACFLAGS += $(shell $(HOSTPKG_CONFIG) --cflags libelf) -include $(obj)/elf_helper.h
 hostprogs := $(munge)

 c-obj-vdso := note.o
\ No newline at end of file
diff --git a/arch/arm64/kernel/vdso32/elf_helper.h b/arch/arm64/kernel/vdso32/elf_helper.h
new file mode 100644
index 000000000..0c290fdb4
--- /dev/null
+++ b/arch/arm64/kernel/vdso32/elf_helper.h
@@ -0,0 +1,2 @@
+#define EF_ARM_EABIMASK 0XFF000000
+#define EF_ARM_EABI_VERSION(flags) ((flags) & EF_ARM_EABIMASK)
\ No newline at end of file
diff --git a/arch/arm64/kvm/hyp/nvhe/Makefile b/arch/arm64/kvm/hyp/nvhe/Makefile
index 9ddc025e4..b1d267938 100644
--- a/arch/arm64/kvm/hyp/nvhe/Makefile
+++ b/arch/arm64/kvm/hyp/nvhe/Makefile
@@ -16,6 +16,8 @@ ccflags-y += -fno-stack-protector	\

 hostprogs := gen-hyprel
 HOST_EXTRACFLAGS += -I$(objtree)/include
+HOST_EXTRACFLAGS += $(shell $(HOSTPKG_CONFIG) --cflags libelf)
+HOST_EXTRACFLAGS += -include $(obj)/endian_helper.h

 lib-objs := clear_page.o copy_page.o memcpy.o memset.o
 lib-objs := $(addprefix ../../../lib/, $(lib-objs))
\ No newline at end of file
diff --git a/arch/arm64/kvm/hyp/nvhe/endian_helper.h b/arch/arm64/kvm/hyp/nvhe/endian_helper.h
new file mode 100644
index 000000000..6a7d993df
--- /dev/null
+++ b/arch/arm64/kvm/hyp/nvhe/endian_helper.h
@@ -0,0 +1,5 @@
+#include <libkern/OSByteOrder.h>
+#define le16toh(x) OSSwapLittleToHostInt16(x)
+#define le32toh(x) OSSwapLittleToHostInt32(x)
+#define le64toh(x) OSSwapLittleToHostInt64(x)
+#define EM_AARCH64 183
\ No newline at end of file
diff --git a/scripts/macos-include/byteswap.h b/scripts/macos-include/byteswap.h
new file mode 100644
index 000000000..fd97ed5e1
--- /dev/null
+++ b/scripts/macos-include/byteswap.h
@@ -0,0 +1,4 @@
+#pragma once
+#define bswap_16 __builtin_bswap16
+#define bswap_32 __builtin_bswap32
+#define bswap_64 __builtin_bswap64
\ No newline at end of file
diff --git a/scripts/macos-include/elf.h b/scripts/macos-include/elf.h
new file mode 100644
index 000000000..5d42ed858
--- /dev/null
+++ b/scripts/macos-include/elf.h
@@ -0,0 +1,24 @@
+#pragma once
+#include <libelf/gelf.h>
+
+#define STT_SPARC_REGISTER 3
+#define R_386_32 1
+#define R_386_PC32 2
+#define R_MIPS_HI16 5
+#define R_MIPS_LO16 6
+#define R_MIPS_26 4
+#define R_MIPS_32 2
+#define R_ARM_ABS32 2
+#define R_ARM_REL32 3
+#define R_ARM_PC24 1
+#define R_ARM_CALL 28
+#define R_ARM_JUMP24 29
+#define R_ARM_THM_JUMP24 30
+#define R_ARM_THM_PC22 10
+#define R_ARM_MOVW_ABS_NC 43
+#define R_ARM_MOVT_ABS 44
+#define R_ARM_THM_MOVW_ABS_NC 47
+#define R_ARM_THM_MOVT_ABS 48
+#define R_ARM_THM_JUMP19 51
+#define R_AARCH64_ABS64 257
+#define R_AARCH64_PREL64 260
\ No newline at end of file
diff --git a/scripts/macos-include/endian.h b/scripts/macos-include/endian.h
new file mode 100644
index 000000000..ff437df6a
--- /dev/null
+++ b/scripts/macos-include/endian.h
@@ -0,0 +1,33 @@
+#ifndef __FINK_ENDIANDEV_PKG_ENDIAN_H__
+#define __FINK_ENDIANDEV_PKG_ENDIAN_H__ 1
+
+/** compatibility header for endian.h
+ * This is a simple compatibility shim to convert
+ * BSD/Linux endian macros to the Mac OS X equivalents.
+ * It is public domain.
+ * */
+
+#ifndef __APPLE__
+	#warning "This header file (endian.h) is MacOS X specific.\n"
+#endif	/* __APPLE__ */
+
+
+#include <libkern/OSByteOrder.h>
+
+#define htobe16(x) OSSwapHostToBigInt16(x)
+#define htole16(x) OSSwapHostToLittleInt16(x)
+#define be16toh(x) OSSwapBigToHostInt16(x)
+#define le16toh(x) OSSwapLittleToHostInt16(x)
+
+#define htobe32(x) OSSwapHostToBigInt32(x)
+#define htole32(x) OSSwapHostToLittleInt32(x)
+#define be32toh(x) OSSwapBigToHostInt32(x)
+#define le32toh(x) OSSwapLittleToHostInt32(x)
+
+#define htobe64(x) OSSwapHostToBigInt64(x)
+#define htole64(x) OSSwapHostToLittleInt64(x)
+#define be64toh(x) OSSwapBigToHostInt64(x)
+#define le64toh(x) OSSwapLittleToHostInt64(x)
+
+
+#endif	/* __FINK_ENDIANDEV_PKG_ENDIAN_H__ */
\ No newline at end of file
diff --git a/scripts/mod/file2alias.c b/scripts/mod/file2alias.c
index 7056751c2..581c4da99 100644
--- a/scripts/mod/file2alias.c
+++ b/scripts/mod/file2alias.c
@@ -10,7 +10,10 @@
  * of the GNU General Public License, incorporated herein by reference.
  */

+#define _UUID_T
+#define uuid_t int
 #include "modpost.h"
+#undef uuid_t
 #include "devicetable-offsets.h"

 /* We use the ELF typedefs for kernel_ulong_t but bite the bullet and